// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Image.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Image.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Image::Image()
{
    // m_image com.eprosima.idl.parser.typecode.SequenceTypeCode@52525845

    // m_timestamp com.eprosima.idl.parser.typecode.StringTypeCode@3b94d659
    m_timestamp ="";
    // m_frame_number com.eprosima.idl.parser.typecode.PrimitiveTypeCode@24b1d79b
    m_frame_number = 0;
    // m_height com.eprosima.idl.parser.typecode.PrimitiveTypeCode@68ceda24
    m_height = 0;
    // m_width com.eprosima.idl.parser.typecode.PrimitiveTypeCode@281e3708
    m_width = 0;

}

Image::~Image()
{





}

Image::Image(
        const Image& x)
{
    m_image = x.m_image;
    m_timestamp = x.m_timestamp;
    m_frame_number = x.m_frame_number;
    m_height = x.m_height;
    m_width = x.m_width;
}

Image::Image(
        Image&& x) noexcept 
{
    m_image = std::move(x.m_image);
    m_timestamp = std::move(x.m_timestamp);
    m_frame_number = x.m_frame_number;
    m_height = x.m_height;
    m_width = x.m_width;
}

Image& Image::operator =(
        const Image& x)
{

    m_image = x.m_image;
    m_timestamp = x.m_timestamp;
    m_frame_number = x.m_frame_number;
    m_height = x.m_height;
    m_width = x.m_width;

    return *this;
}

Image& Image::operator =(
        Image&& x) noexcept
{

    m_image = std::move(x.m_image);
    m_timestamp = std::move(x.m_timestamp);
    m_frame_number = x.m_frame_number;
    m_height = x.m_height;
    m_width = x.m_width;

    return *this;
}

bool Image::operator ==(
        const Image& x) const
{

    return (m_image == x.m_image && m_timestamp == x.m_timestamp && m_frame_number == x.m_frame_number && m_height == x.m_height && m_width == x.m_width);
}

bool Image::operator !=(
        const Image& x) const
{
    return !(*this == x);
}

size_t Image::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Image::getCdrSerializedSize(
        const Image& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.image().size() > 0)
    {
        current_alignment += (data.image().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.timestamp().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Image::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_image;
    scdr << m_timestamp.c_str();
    scdr << m_frame_number;
    scdr << m_height;
    scdr << m_width;

}

void Image::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_image;
    dcdr >> m_timestamp;
    dcdr >> m_frame_number;
    dcdr >> m_height;
    dcdr >> m_width;
}

/*!
 * @brief This function copies the value in member image
 * @param _image New value to be copied in member image
 */
void Image::image(
        const std::vector<uint8_t>& _image)
{
    m_image = _image;
}

/*!
 * @brief This function moves the value in member image
 * @param _image New value to be moved in member image
 */
void Image::image(
        std::vector<uint8_t>&& _image)
{
    m_image = std::move(_image);
}

/*!
 * @brief This function returns a constant reference to member image
 * @return Constant reference to member image
 */
const std::vector<uint8_t>& Image::image() const
{
    return m_image;
}

/*!
 * @brief This function returns a reference to member image
 * @return Reference to member image
 */
std::vector<uint8_t>& Image::image()
{
    return m_image;
}
/*!
 * @brief This function copies the value in member timestamp
 * @param _timestamp New value to be copied in member timestamp
 */
void Image::timestamp(
        const std::string& _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function moves the value in member timestamp
 * @param _timestamp New value to be moved in member timestamp
 */
void Image::timestamp(
        std::string&& _timestamp)
{
    m_timestamp = std::move(_timestamp);
}

/*!
 * @brief This function returns a constant reference to member timestamp
 * @return Constant reference to member timestamp
 */
const std::string& Image::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
std::string& Image::timestamp()
{
    return m_timestamp;
}
/*!
 * @brief This function sets a value in member frame_number
 * @param _frame_number New value for member frame_number
 */
void Image::frame_number(
        uint32_t _frame_number)
{
    m_frame_number = _frame_number;
}

/*!
 * @brief This function returns the value of member frame_number
 * @return Value of member frame_number
 */
uint32_t Image::frame_number() const
{
    return m_frame_number;
}

/*!
 * @brief This function returns a reference to member frame_number
 * @return Reference to member frame_number
 */
uint32_t& Image::frame_number()
{
    return m_frame_number;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void Image::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t Image::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& Image::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void Image::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t Image::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& Image::width()
{
    return m_width;
}


size_t Image::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool Image::isKeyDefined()
{
    return false;
}

void Image::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}
